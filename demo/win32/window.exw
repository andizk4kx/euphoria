--****
-- === win32/window.exw
--
-- A Standard Windows Window coded at the primitive API level
-- Most Euphoria programmers should simply use Win32Lib, wxWidgets, EuGTK or EuIUP!
--


include std/dll.e
include std/machine.e
include std/math.e
include std/error.e
include std/console.e
include std/memstruct/windows.e

include winstruct.ew

constant
	LTGRAY_BRUSH = 1,
	GRAY_BRUSH = 2,
	DKGRAY_BRUSH = 3,
	BLACK_BRUSH = 4,
	NULL_BRUSH = 5,
-- 	HOLLOW_BRUSH = ?,
	WHITE_PEN = 6,
	BLACK_PEN = 7,
	NULL_PEN = 8,
	OEM_FIXED_FONT = 10,
	ANSI_FIXED_FONT = 11,
	ANSI_VAR_FONT = 12,
	SYSTEM_FONT = 13,
	DEVICE_DEFAULT_FONT = 14,
	DEFAULT_PALETTE = 15,
	SYSTEM_FIXED_FONT = 16,
	STOCK_LAST = 16,

	COLOR_SCROLLBAR = 0,
	COLOR_BACKGROUND = 1,
	COLOR_ACTIVECAPTION = 2,
	COLOR_INACTIVECAPTION = 3,
	COLOR_MENU = 4,
	COLOR_WINDOW = 5,
	COLOR_WINDOWFRAME = 6,
	COLOR_MENUTEXT = 7,
	COLOR_WINDOWTEXT = 8,
	COLOR_CAPTIONTEXT = 9,
	COLOR_ACTIVEBORDER = 10,
	COLOR_INACTIVEBORDER = 11,
	COLOR_APPWORKSPACE = 12,
	COLOR_HIGHLIGHT = 13,
	COLOR_HIGHLIGHTTEXT = 14,
	COLOR_BTNFACE = 15,
	COLOR_BTNSHADOW = 16,
	COLOR_GRAYTEXT = 17,
	COLOR_BTNTEXT = 18,
	COLOR_INACTIVECAPTIONTEXT = 19,
	COLOR_BTNHIGHLIGHT = 20,

	LOGPIXELSX = 88,
	LOGPIXELSY = 90,
	OUT_DEFAULT_PRECIS = 0,
	OUT_STRING_PRECIS = 1,
	OUT_CHARACTER_PRECIS = 2,
	OUT_STROKE_PRECIS = 3,
	OUT_TT_PRECIS = 4,
	OUT_DEVICE_PRECIS = 5,
	OUT_RASTER_PRECIS = 6,
	OUT_TT_ONLY_PRECIS = 7,
	OUT_OUTLINE_PRECIS = 8,
	OUT_SCREEN_OUTLINE_PRECIS = 9,
	OUT_PS_ONLY_PRECIS = 10,

	CLIP_DEFAULT_PRECIS = 0,
	CLIP_CHARACTER_PRECIS = 1,
	CLIP_STROKE_PRECIS = 2,
	CLIP_MASK = #F,
-- 	CLIP_LH_ANGLES = (1<<4),

-- 	CLIP_TT_ALWAYS = (2<<4),

-- 	CLIP_EMBEDDED = (8<<4),

	DEFAULT_QUALITY = 0,
	DRAFT_QUALITY = 1,
	PROOF_QUALITY = 2,

	DEFAULT_PITCH = 0,
	FIXED_PITCH = 1,
	VARIABLE_PITCH = 2,

	ANSI_CHARSET = 0,
	DEFAULT_CHARSET = 1,
	SYMBOL_CHARSET = 2,
	SHIFTJIS_CHARSET = 128,
	HANGEUL_CHARSET = 129,
	HANGUL_CHARSET = 129,
	GB2312_CHARSET = 134,
	CHINESEBIG5_CHARSET = 136,
	OEM_CHARSET = 255,

	FF_DONTCARE = shift_bits(0, -4),

-- 	FF_ROMAN = (1<<4)  ,

-- 	FF_SWISS = (2<<4)  ,

-- 	FF_MODERN = (3<<4)  ,

-- 	FF_SCRIPT = (4<<4)  ,

-- 	FF_DECORATIVE = (5<<4)  ,

	FW_DONTCARE = 0,
	FW_THIN = 100,
	FW_EXTRALIGHT = 200,
	FW_LIGHT = 300,
	FW_NORMAL = 400,
	FW_MEDIUM = 500,
	FW_SEMIBOLD = 600,
	FW_BOLD = 700,
	FW_EXTRABOLD = 800,
	FW_HEAVY = 900,

-- 	FW_ULTRALIGHT = FW_EXTRALIGHT,

-- 	FW_REGULAR = FW_NORMAL,

-- 	FW_DEMIBOLD = FW_SEMIBOLD,

-- 	FW_ULTRABOLD = FW_EXTRABOLD,

-- 	FW_BLACK = FW_HEAVY,
	$

atom
 --get_env(media?)
 wav_file = allocate_string(getenv("Windir")&`\Media\tada.wav`),
 Euphoria = allocate_string("A Plain Vanilla Window using Euphoria!"),
 my_title = allocate_string("Euphoria for WINDOWS"),
 $

 --from Mike Duffy Units
-- create_font(hdc,"Courier New",12,FW_BOLD,0,0,0)

public function create_font(atom hdc, sequence fontname="Veranda",
	integer points=12,
	integer weight=0, integer fitalic=0,
	integer funderline=0, integer fstrikeout=0, atom pandf=0
	)
	atom hfont, lpszFace, ppi, lfheight

	ppi = c_func(GetDeviceCaps,{hdc,LOGPIXELSY})
	lfheight = -c_func( MulDiv, { points, ppi, 72})
	lpszFace = allocate_string(fontname, 1)
	hfont = c_func(CreateFont,
		{lfheight,	-- logical height of font
		 0,			-- logical average character width
		 0,			-- angle of escapement
		 0,			-- base-line orientation angle
		 weight,		-- font weight
		 fitalic,			-- italic attribute flag
		 funderline,		-- underline attribute flag
		 fstrikeout,		-- strikeout attribute flag
		 DEFAULT_CHARSET,	-- character set identifier
		 OUT_DEFAULT_PRECIS,	-- output precision
		 CLIP_DEFAULT_PRECIS,	-- clipping precision
		 DEFAULT_QUALITY,	-- output quality
		 or_all({DEFAULT_PITCH,FF_DONTCARE,pandf}),-- 0 pitch and family
		 lpszFace 			-- pointer to typeface name string
		}
	)
	return hfont
end function


-- callback routine to handle Window class
public function WndProc(atom hwnd, atom iMsg, atom wParam, atom lParam)
	
	if iMsg = WM_CREATE then
		c_proc(PlaySound, {wav_file,
				NULL,
				or_bits(SND_FILENAME, SND_ASYNC)})
		return 0
	
	elsif iMsg = WM_PAINT then
		atom
			hdc,
			oldFont,
			hCtrlFont,
			ps = allocate( sizeof(PAINTSTRUCT), 1),
			rect = allocate( sizeof(RECT), 1)

		hdc = c_func(BeginPaint, {hwnd, ps})
		c_proc(GetClientRect, {hwnd, rect})
		hCtrlFont = create_font(hdc,"Verdana",12,FW_BOLD,0,0,0,0)
	
		--oldFont = c_func(SelectObject, {hdc, c_func(GetStockObject, {ANSI_VAR_FONT}) })
		oldFont = c_func(SelectObject, {hdc, hCtrlFont })
		c_func(SetTextColor, {hdc, c_func(GetSysColor, {COLOR_BTNTEXT}) })
		c_func(SetBkColor, {hdc, c_func(GetSysColor, {COLOR_BTNFACE}) })

		c_proc(DrawText, {hdc, Euphoria, -1, rect,
				or_all({DT_SINGLELINE, DT_CENTER, DT_VCENTER})})
		c_proc(EndPaint, {hwnd, ps})
		return 0

	elsif iMsg = WM_DESTROY then
		c_proc(PostQuitMessage, {0})
		return 0
	end if
	
    return c_func(DefWindowProc, {hwnd, iMsg, wParam, lParam})
end function


procedure WinMain()
-- main routine
	atom szAppName
	atom hwnd
	atom msg
	atom wndclass
	atom WndProcAddress
	atom class
	integer id
	atom icon_handle

	wndclass = allocate( sizeof(WNDCLASSEX), 1)
	msg = allocate( sizeof(MSG), 1)
	szAppName = allocate_string("winhello", 1)

	id = routine_id("WndProc")
	if id = -1 then
		crash("routine_id failed!")
	end if

	WndProcAddress = call_back(id) -- get address for callback

	wndclass.WNDCLASSEX.cbSize      = sizeof(WNDCLASSEX)
	wndclass.WNDCLASSEX.style       = or_bits(CS_HREDRAW, CS_VREDRAW)
	wndclass.WNDCLASSEX.lpfnWndProc = WndProcAddress
	wndclass.WNDCLASSEX.cbClsExtra  = 0
	wndclass.WNDCLASSEX.cbWndExtra  = 0
	wndclass.WNDCLASSEX.hInstance   = 0

	class = register_class( wndclass, WndProcAddress, szAppName )

	if class = 0 then
		crash("could not register class")
	end if
	hwnd = c_func(CreateWindow, {
			0,                       -- extended style
			szAppName,               -- window class name
			my_title,                -- window caption
			WS_OVERLAPPEDWINDOW,     -- window style
			CW_USEDEFAULT,           -- initial x position
			CW_USEDEFAULT,           -- initial y position
			CW_USEDEFAULT,           -- initial x size
			CW_USEDEFAULT,           -- initial y size
			NULL,                    -- parent window handle
			NULL,                    -- window menu handle
			0 ,                 --hInstance // program instance handle
			NULL})              -- creation parameters

	if hwnd = 0 then
		crash("Couldn't CreateWindow")
	end if
	c_proc(ShowWindow, {hwnd, SW_SHOWNORMAL})
	c_proc(UpdateWindow, {hwnd})

	-- message loop
	while c_func(GetMessage, {msg, NULL, 0, 0}) do
		c_proc(TranslateMessage, {msg})
		c_proc(DispatchMessage, {msg})
	end while
end procedure

WinMain()
